package com.linearity.datservicereplacement.androidhooking.com.android.nfc;

import static com.linearity.datservicereplacement.ReturnIfNonSys.EMPTY_ARRAYLIST;
import static com.linearity.datservicereplacement.ReturnIfNonSys.EMPTY_HASHMAP;
import static com.linearity.datservicereplacement.ReturnIfNonSys.hookAllMethodsWithCache_Auto;
import static com.linearity.datservicereplacement.StartHook.classesAndHooks;

import com.linearity.utils.FakeClass.java.util.EmptyArrays;
import com.linearity.utils.NotFinished;

/**
 * testing my code generating.these are all generated by python script.
 * <p>but i didn't randomize it.be careful</p>
 */
//TODO:Randomize NFC.
@NotFinished
public class HookNFC {

    public static void doHook(){
        classesAndHooks.put("com.android.nfc.NfcService$NfcAdapterService", HookNFC::hookINfcAdapter);
        classesAndHooks.put("com.android.nfc.cardemulation.CardEmulationManager$CardEmulationInterface", HookNFC::hookINfcCardEmulation);
        classesAndHooks.put("com.android.nfc.NfcService$NfcDtaService", HookNFC::hookINfcDta);
        classesAndHooks.put("com.android.nfc.cardemulation.CardEmulationManager$NfcFCardEmulationInterface", HookNFC::hookINfcFCardEmulation);
        classesAndHooks.put("com.android.nfc.NfcService$TagService", HookNFC::hookINfcTag);
        classesAndHooks.put("com.android.nfc.NfcService$T4tNdefNfceeService", HookNFC::hookIT4tNdefNfcee);
        classesAndHooks.put("android.nfc.NfcVendorNciCallbackListener", HookNFC::hookINfcVendorNciCallback);
        classesAndHooks.put("android.nfc.NfcWlcStateListener", HookNFC::hookINfcWlcStateListener);
        classesAndHooks.put("android.nfc.NfcControllerAlwaysOnListener", HookNFC::hookINfcControllerAlwaysOnListener);
        classesAndHooks.put("android.nfc.NfcOemExtension$NfcOemExtensionCallback", HookNFC::hookINfcOemExtensionCallback);
        classesAndHooks.put("android.nfc.NfcActivityManager", HookNFC::hookIAppCallback);
    }

    public static void hookIAppCallback(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onTagDiscovered",null);
    }
    public static void hookINfcAdapter(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"getNfcTagInterface",null);//INfcTag
//        hookAllMethodsWithCache_Auto(hookClass,"getNfcCardEmulationInterface",null);//INfcCardEmulation
//        hookAllMethodsWithCache_Auto(hookClass,"getNfcFCardEmulationInterface",null);//INfcCardEmulation
        hookAllMethodsWithCache_Auto(hookClass,"getNfcAdapterExtrasInterface",null);//INfcAdapterExtras
        hookAllMethodsWithCache_Auto(hookClass,"getNfcDtaInterface",null);//INfcDta
        hookAllMethodsWithCache_Auto(hookClass,"getState",0);
        hookAllMethodsWithCache_Auto(hookClass,"disable",true);
        hookAllMethodsWithCache_Auto(hookClass,"enable",true);
        hookAllMethodsWithCache_Auto(hookClass,"pausePolling",0);
        hookAllMethodsWithCache_Auto(hookClass,"resumePolling",0);
        hookAllMethodsWithCache_Auto(hookClass,"setForegroundDispatch",null);
        hookAllMethodsWithCache_Auto(hookClass,"setAppCallback",null);
        hookAllMethodsWithCache_Auto(hookClass,"ignore",true);
        hookAllMethodsWithCache_Auto(hookClass,"dispatch",null);
        hookAllMethodsWithCache_Auto(hookClass,"setReaderMode",null);
        hookAllMethodsWithCache_Auto(hookClass,"addNfcUnlockHandler",null);
        hookAllMethodsWithCache_Auto(hookClass,"removeNfcUnlockHandler",null);
        hookAllMethodsWithCache_Auto(hookClass,"verifyNfcPermission",null);
        hookAllMethodsWithCache_Auto(hookClass,"isNfcSecureEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"deviceSupportsNfcSecure",true);
        hookAllMethodsWithCache_Auto(hookClass,"setNfcSecure",true);
//        hookAllMethodsWithCache_Auto(hookClass,"getNfcAntennaInfo",NfcAntennaInfo);
        hookAllMethodsWithCache_Auto(hookClass,"setControllerAlwaysOn",null);
        hookAllMethodsWithCache_Auto(hookClass,"isControllerAlwaysOn",true);
        hookAllMethodsWithCache_Auto(hookClass,"isControllerAlwaysOnSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"registerControllerAlwaysOnListener",null);
        hookAllMethodsWithCache_Auto(hookClass,"unregisterControllerAlwaysOnListener",null);
        hookAllMethodsWithCache_Auto(hookClass,"isTagIntentAppPreferenceSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"getTagIntentAppPreferenceForUser",EMPTY_HASHMAP);
        hookAllMethodsWithCache_Auto(hookClass,"setTagIntentAppPreferenceForUser",0);
        hookAllMethodsWithCache_Auto(hookClass,"isReaderOptionEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"isReaderOptionSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"enableReaderOption",true);
        hookAllMethodsWithCache_Auto(hookClass,"isObserveModeSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"isObserveModeEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"setObserveMode",true);
        hookAllMethodsWithCache_Auto(hookClass,"setWlcEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"isWlcEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"registerWlcStateListener",null);
        hookAllMethodsWithCache_Auto(hookClass,"unregisterWlcStateListener",null);
//        hookAllMethodsWithCache_Auto(hookClass,"getWlcListenerDeviceInfo",WlcListenerDeviceInfo);
        hookAllMethodsWithCache_Auto(hookClass,"updateDiscoveryTechnology",null);
        hookAllMethodsWithCache_Auto(hookClass,"notifyPollingLoop",null);
        hookAllMethodsWithCache_Auto(hookClass,"notifyHceDeactivated",null);
        hookAllMethodsWithCache_Auto(hookClass,"notifyTestHceData",null);
        hookAllMethodsWithCache_Auto(hookClass,"sendVendorNciMessage",0);
        hookAllMethodsWithCache_Auto(hookClass,"registerVendorExtensionCallback",null);
        hookAllMethodsWithCache_Auto(hookClass,"unregisterVendorExtensionCallback",null);
        hookAllMethodsWithCache_Auto(hookClass,"registerOemExtensionCallback",null);
        hookAllMethodsWithCache_Auto(hookClass,"unregisterOemExtensionCallback",null);
        hookAllMethodsWithCache_Auto(hookClass,"clearPreference",null);
        hookAllMethodsWithCache_Auto(hookClass,"setScreenState",null);
        hookAllMethodsWithCache_Auto(hookClass,"checkFirmware",null);
        hookAllMethodsWithCache_Auto(hookClass,"fetchActiveNfceeList",EMPTY_HASHMAP);
        hookAllMethodsWithCache_Auto(hookClass,"triggerInitialization",null);
        hookAllMethodsWithCache_Auto(hookClass,"getSettingStatus",true);
        hookAllMethodsWithCache_Auto(hookClass,"isTagPresent",true);
        hookAllMethodsWithCache_Auto(hookClass,"getRoutingTableEntryList",EMPTY_ARRAYLIST);
        hookAllMethodsWithCache_Auto(hookClass,"indicateDataMigration",null);
        hookAllMethodsWithCache_Auto(hookClass,"commitRouting",0);
        hookAllMethodsWithCache_Auto(hookClass,"isTagIntentAllowed",true);
//        hookAllMethodsWithCache_Auto(hookClass,"getT4tNdefNfceeInterface",IT4tNdefNfcee);
        hookAllMethodsWithCache_Auto(hookClass,"getMaxPausePollingTimeoutMs",0L);
    }
    public static void hookINfcAdapterExtras(Class<?> hookClass){
//        hookAllMethodsWithCache_Auto(hookClass,"open",Bundle);
//        hookAllMethodsWithCache_Auto(hookClass,"close",Bundle);
//        hookAllMethodsWithCache_Auto(hookClass,"transceive",Bundle);
        hookAllMethodsWithCache_Auto(hookClass,"getCardEmulationRoute",0);
        hookAllMethodsWithCache_Auto(hookClass,"setCardEmulationRoute",null);
        hookAllMethodsWithCache_Auto(hookClass,"authenticate",null);
//        hookAllMethodsWithCache_Auto(hookClass,"getDriverName",String);
    }
    public static void hookINfcCardEmulation(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"isDefaultServiceForCategory",true);
        hookAllMethodsWithCache_Auto(hookClass,"isDefaultServiceForAid",true);
        hookAllMethodsWithCache_Auto(hookClass,"setDefaultServiceForCategory",true);
        hookAllMethodsWithCache_Auto(hookClass,"setDefaultForNextTap",true);
        hookAllMethodsWithCache_Auto(hookClass,"setShouldDefaultToObserveModeForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"registerAidGroupForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"registerPollingLoopFilterForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"registerPollingLoopPatternFilterForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"setOffHostForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"unsetOffHostForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"getAidGroupForService",null);//AidGroup
        hookAllMethodsWithCache_Auto(hookClass,"removeAidGroupForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"removePollingLoopFilterForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"removePollingLoopPatternFilterForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"getServices",EMPTY_ARRAYLIST);
        hookAllMethodsWithCache_Auto(hookClass,"setPreferredService",true);
        hookAllMethodsWithCache_Auto(hookClass,"unsetPreferredService",true);
        hookAllMethodsWithCache_Auto(hookClass,"supportsAidPrefixRegistration",true);
        hookAllMethodsWithCache_Auto(hookClass,"getPreferredPaymentService",null);//ApduServiceInfo
        hookAllMethodsWithCache_Auto(hookClass,"setServiceEnabledForCategoryOther",0);
        hookAllMethodsWithCache_Auto(hookClass,"isDefaultPaymentRegistered",true);
        hookAllMethodsWithCache_Auto(hookClass,"overrideRoutingTable",null);
        hookAllMethodsWithCache_Auto(hookClass,"recoverRoutingTable",null);
        hookAllMethodsWithCache_Auto(hookClass,"isEuiccSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"getDefaultNfcSubscriptionId",0);
        hookAllMethodsWithCache_Auto(hookClass,"setDefaultNfcSubscriptionId",0);
        hookAllMethodsWithCache_Auto(hookClass,"setAutoChangeStatus",null);
        hookAllMethodsWithCache_Auto(hookClass,"isAutoChangeEnabled",true);
        hookAllMethodsWithCache_Auto(hookClass,"getRoutingStatus",EMPTY_ARRAYLIST);
        hookAllMethodsWithCache_Auto(hookClass,"overwriteRoutingTable",null);
        hookAllMethodsWithCache_Auto(hookClass,"registerNfcEventListener",null);
        hookAllMethodsWithCache_Auto(hookClass,"unregisterNfcEventListener",null);
    }
    public static void hookINfcControllerAlwaysOnListener(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onControllerAlwaysOnChanged",null);
    }
    public static void hookINfcDta(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"enableDta",null);
        hookAllMethodsWithCache_Auto(hookClass,"disableDta",null);
        hookAllMethodsWithCache_Auto(hookClass,"enableServer",true);
        hookAllMethodsWithCache_Auto(hookClass,"disableServer",null);
        hookAllMethodsWithCache_Auto(hookClass,"enableClient",true);
        hookAllMethodsWithCache_Auto(hookClass,"disableClient",null);
        hookAllMethodsWithCache_Auto(hookClass,"registerMessageService",true);
    }
    public static void hookINfcEventListener(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onPreferredServiceChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onObserveModeStateChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onAidConflictOccurred",null);
        hookAllMethodsWithCache_Auto(hookClass,"onAidNotRouted",null);
        hookAllMethodsWithCache_Auto(hookClass,"onNfcStateChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onRemoteFieldChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onInternalErrorReported",null);
    }
    public static void hookINfcFCardEmulation(Class<?> hookClass){
//        hookAllMethodsWithCache_Auto(hookClass,"getSystemCodeForService",String);
        hookAllMethodsWithCache_Auto(hookClass,"registerSystemCodeForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"removeSystemCodeForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"getNfcid2ForService","");//String
        hookAllMethodsWithCache_Auto(hookClass,"setNfcid2ForService",true);
        hookAllMethodsWithCache_Auto(hookClass,"enableNfcFForegroundService",true);
        hookAllMethodsWithCache_Auto(hookClass,"disableNfcFForegroundService",true);
        hookAllMethodsWithCache_Auto(hookClass,"getNfcFServices",EMPTY_ARRAYLIST);
        hookAllMethodsWithCache_Auto(hookClass,"getMaxNumOfRegisterableSystemCodes",0);
    }
    public static void hookINfcOemExtensionCallback(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onTagConnected",null);
        hookAllMethodsWithCache_Auto(hookClass,"onStateUpdated",null);
        hookAllMethodsWithCache_Auto(hookClass,"onApplyRouting",null);
        hookAllMethodsWithCache_Auto(hookClass,"onNdefRead",null);
        hookAllMethodsWithCache_Auto(hookClass,"onEnable",null);
        hookAllMethodsWithCache_Auto(hookClass,"onDisable",null);
        hookAllMethodsWithCache_Auto(hookClass,"onBootStarted",null);
        hookAllMethodsWithCache_Auto(hookClass,"onEnableStarted",null);
        hookAllMethodsWithCache_Auto(hookClass,"onDisableStarted",null);
        hookAllMethodsWithCache_Auto(hookClass,"onBootFinished",null);
        hookAllMethodsWithCache_Auto(hookClass,"onEnableFinished",null);
        hookAllMethodsWithCache_Auto(hookClass,"onDisableFinished",null);
        hookAllMethodsWithCache_Auto(hookClass,"onTagDispatch",null);
        hookAllMethodsWithCache_Auto(hookClass,"onRoutingChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onHceEventReceived",null);
        hookAllMethodsWithCache_Auto(hookClass,"onReaderOptionChanged",null);
        hookAllMethodsWithCache_Auto(hookClass,"onCardEmulationActivated",null);
        hookAllMethodsWithCache_Auto(hookClass,"onRfFieldActivated",null);
        hookAllMethodsWithCache_Auto(hookClass,"onRfDiscoveryStarted",null);
        hookAllMethodsWithCache_Auto(hookClass,"onEeListenActivated",null);
        hookAllMethodsWithCache_Auto(hookClass,"onEeUpdated",null);
        hookAllMethodsWithCache_Auto(hookClass,"onGetOemAppSearchIntent",null);
        hookAllMethodsWithCache_Auto(hookClass,"onNdefMessage",null);
        hookAllMethodsWithCache_Auto(hookClass,"onLaunchHceAppChooserActivity",null);
        hookAllMethodsWithCache_Auto(hookClass,"onLaunchHceTapAgainActivity",null);
        hookAllMethodsWithCache_Auto(hookClass,"onRoutingTableFull",null);
        hookAllMethodsWithCache_Auto(hookClass,"onLogEventNotified",null);
        hookAllMethodsWithCache_Auto(hookClass,"onExtractOemPackages",null);
    }
    public static void hookINfcTag(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"connect",0);
        hookAllMethodsWithCache_Auto(hookClass,"reconnect",0);
        hookAllMethodsWithCache_Auto(hookClass,"getTechList",EmptyArrays.EMPTY_INT_ARRAY);
        hookAllMethodsWithCache_Auto(hookClass,"isNdef",true);
        hookAllMethodsWithCache_Auto(hookClass,"isPresent",true);
        hookAllMethodsWithCache_Auto(hookClass,"transceive",null);//TransceiveResult
        hookAllMethodsWithCache_Auto(hookClass,"ndefRead",null);//NdefMessage
        hookAllMethodsWithCache_Auto(hookClass,"ndefWrite",0);
        hookAllMethodsWithCache_Auto(hookClass,"ndefMakeReadOnly",0);
        hookAllMethodsWithCache_Auto(hookClass,"ndefIsWritable",true);
        hookAllMethodsWithCache_Auto(hookClass,"formatNdef",0);
        hookAllMethodsWithCache_Auto(hookClass,"rediscover",null);//Tag
        hookAllMethodsWithCache_Auto(hookClass,"setTimeout",0);
        hookAllMethodsWithCache_Auto(hookClass,"getTimeout",0);
        hookAllMethodsWithCache_Auto(hookClass,"resetTimeouts",null);
        hookAllMethodsWithCache_Auto(hookClass,"canMakeReadOnly",true);
        hookAllMethodsWithCache_Auto(hookClass,"getMaxTransceiveLength",0);
        hookAllMethodsWithCache_Auto(hookClass,"getExtendedLengthApdusSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"isTagUpToDate",true);
    }
    public static void hookINfcUnlockHandler(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onUnlockAttempted",true);
    }
    public static void hookINfcVendorNciCallback(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onVendorResponseReceived",null);
        hookAllMethodsWithCache_Auto(hookClass,"onVendorNotificationReceived",null);
    }
    public static void hookINfcWlcStateListener(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onWlcStateChanged",null);
    }
    public static void hookIT4tNdefNfcee(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"writeData",0);
        hookAllMethodsWithCache_Auto(hookClass,"readData", EmptyArrays.EMPTY_BYTE_ARRAY);
        hookAllMethodsWithCache_Auto(hookClass,"clearNdefData",0);
        hookAllMethodsWithCache_Auto(hookClass,"isNdefOperationOngoing",true);
        hookAllMethodsWithCache_Auto(hookClass,"isNdefNfceeEmulationSupported",true);
        hookAllMethodsWithCache_Auto(hookClass,"readCcfile",null);//T4tNdefNfceeCcFileInfo
    }
    public static void hookITagRemovedCallback(Class<?> hookClass){
        hookAllMethodsWithCache_Auto(hookClass,"onTagRemoved",null);
    }

}
